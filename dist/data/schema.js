'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeDefs = undefined;

var _templateObject = _taggedTemplateLiteral(['\n scalar Date\n\n  input CreateUserInput {\n    email: String!\n    username: String!\n  }\n\n  input UpdateUserInput {\n    username: String!\n    email: String!\n  }\n\n  input CreateArticleInput {\n    userId: Int!\n    name: String!\n    price: Int!\n    description: String!\n    image: String!\n  }\n\n  input UpdateArticleInput {\n    id: Int!\n    name: String!\n    price: Int!\n    description: String!\n    image: String!\n  }\n\n  input CreateChatInput {\n    ownerId: Int!\n    buyerId: Int!\n    articleId: Int!\n  }\n\n  input CreateMessageInput {\n    userId: Int!\n    chatId: Int!\n    text: String!\n  }\n\n type User {\n    id: Int! \n    email: String! \n    username: String!\n    articles: [Article!]!\n    chats: [Chat!]!\n    \n  }\n  type Message {\n    id: Int!\n    to: Chat!\n    from: User!\n    text: String!\n    createdAt: Date!\n  }\n\n  type Article{\n      id: Int!\n      name: String!\n      description: String!\n      price: Int!\n      image: String!\n      owner: User!\n      chats: [Chat!]!\n  }\n\n  type Chat{\n    id: Int!\n    buyer: User!\n    owner: User!\n    messages: [Message!]!\n    from: Article!\n\n  }\n\n  type Query{\n    userByEmail(email: String!): User\n    userLogin(username: String!, password: String!): User\n    users(id: Int): [User]\n    user(email: String, id: Int): User\n    messages(userId: Int): [Message]\n    articles(userId: Int): [Article]\n    article(id: Int): Article\n    chats(articleId: Int): [Chat]\n    chat(id: Int): Chat\n    \n\n  }\n\n  type Mutation{\n\n    addUser(email: String!, username: String, password: String!): User\n    updateUser(user: UpdateUserInput): User\n    updateUserEmail(id: Int!, email: String!): User\n    deleteUser(id: Int!): User\n    \n    addArticle(article: CreateArticleInput): Article\n    updateArticle(article: UpdateArticleInput): Article\n    updateDesc(id: Int!, description: String!): Article\n    deleteArticle(id: Int!): Article\n\n    addChat(chat: CreateChatInput!): Chat\n    deleteChat(id: Int!): Chat\n\n    addMessage(message: CreateMessageInput!): Message\n    deleteMessage(id: Int!): Message\n\n  }\n\nschema {\n    query: Query\n    mutation: Mutation\n\n  }\n\n\n '], ['\n scalar Date\n\n  input CreateUserInput {\n    email: String!\n    username: String!\n  }\n\n  input UpdateUserInput {\n    username: String!\n    email: String!\n  }\n\n  input CreateArticleInput {\n    userId: Int!\n    name: String!\n    price: Int!\n    description: String!\n    image: String!\n  }\n\n  input UpdateArticleInput {\n    id: Int!\n    name: String!\n    price: Int!\n    description: String!\n    image: String!\n  }\n\n  input CreateChatInput {\n    ownerId: Int!\n    buyerId: Int!\n    articleId: Int!\n  }\n\n  input CreateMessageInput {\n    userId: Int!\n    chatId: Int!\n    text: String!\n  }\n\n type User {\n    id: Int! \n    email: String! \n    username: String!\n    articles: [Article!]!\n    chats: [Chat!]!\n    \n  }\n  type Message {\n    id: Int!\n    to: Chat!\n    from: User!\n    text: String!\n    createdAt: Date!\n  }\n\n  type Article{\n      id: Int!\n      name: String!\n      description: String!\n      price: Int!\n      image: String!\n      owner: User!\n      chats: [Chat!]!\n  }\n\n  type Chat{\n    id: Int!\n    buyer: User!\n    owner: User!\n    messages: [Message!]!\n    from: Article!\n\n  }\n\n  type Query{\n    userByEmail(email: String!): User\n    userLogin(username: String!, password: String!): User\n    users(id: Int): [User]\n    user(email: String, id: Int): User\n    messages(userId: Int): [Message]\n    articles(userId: Int): [Article]\n    article(id: Int): Article\n    chats(articleId: Int): [Chat]\n    chat(id: Int): Chat\n    \n\n  }\n\n  type Mutation{\n\n    addUser(email: String!, username: String, password: String!): User\n    updateUser(user: UpdateUserInput): User\n    updateUserEmail(id: Int!, email: String!): User\n    deleteUser(id: Int!): User\n    \n    addArticle(article: CreateArticleInput): Article\n    updateArticle(article: UpdateArticleInput): Article\n    updateDesc(id: Int!, description: String!): Article\n    deleteArticle(id: Int!): Article\n\n    addChat(chat: CreateChatInput!): Chat\n    deleteChat(id: Int!): Chat\n\n    addMessage(message: CreateMessageInput!): Message\n    deleteMessage(id: Int!): Message\n\n  }\n\nschema {\n    query: Query\n    mutation: Mutation\n\n  }\n\n\n ']);

var _apolloServer = require('apollo-server');

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var typeDefs = exports.typeDefs = (0, _apolloServer.gql)(_templateObject);
exports.default = typeDefs;